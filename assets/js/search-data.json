{"0": {
    "doc": "Oops…",
    "title": "Oops…",
    "content": "Nothing found here. Visit home . ",
    "url": "/404/",
    
    "relUrl": "/404/"
  },"1": {
    "doc": "Basics",
    "title": "Basics",
    "content": ". | Plugins | Extensions | Queries | Result items | User interface | . ",
    "url": "/gettingstarted/basics/",
    
    "relUrl": "/gettingstarted/basics/"
  },"2": {
    "doc": "Basics",
    "title": "Plugins",
    "content": "A plugin is a physical module that can be loaded/unloaded at runtime. It could be native or provided by plugin provider plugins. Nested plugins are accessible when their provider is loaded. Users can enable/disable and load/unload plugins via the plugins tab in the settings or using the built-in plugin query handler. Enabled plugins load automatically at launch. Plugins with graphical interfaces for configuration can be accessed via the plugins tab in the settings. Each plugin has an identifier. Plugin providers search multiple implementation- and platform-specific plugin paths. The search order proceeds from user-specific to system-wide locations. The first plugin found for an identifier is used. ",
    "url": "/gettingstarted/basics/#plugins",
    
    "relUrl": "/gettingstarted/basics/#plugins"
  },"3": {
    "doc": "Basics",
    "title": "Extensions",
    "content": "An extension is a logical unit extending the app with a particular functionality. Each plugin can provide multiple extension implementations and expose its own extension interfaces. More on this topic can be found in the Extension section . ",
    "url": "/gettingstarted/basics/#extensions",
    
    "relUrl": "/gettingstarted/basics/#extensions"
  },"4": {
    "doc": "Basics",
    "title": "Queries",
    "content": "There are three built-in extension interfaces that handle user input: . If the query starts with a trigger of a trigger query handler extension, the query is handled exclusively by the corresponding handler. This allows the handler to set an inline input hint, asynchronously add match items and as such define their order. If the query does not start with a trigger, the query is handled by all enabled global query handler extensions in parallel and eventually the match items are merged and sorted by match and usage score. There is one special . In any case the enabled fallback handler extensions provide a separate set of fallbacks items, which are displayed when the matches are empty or when the user explicitly requests them. ",
    "url": "/gettingstarted/basics/#queries",
    
    "relUrl": "/gettingstarted/basics/#queries"
  },"5": {
    "doc": "Basics",
    "title": "Result items",
    "content": "Besides the obvious icon, title and description, each item provides a list of actions the user can execute. Items may also define an input action text, which is used to replace the current input on input action activation. Its semantics are loosely defined; it may be a completion, an evaluation, or something else. ",
    "url": "/gettingstarted/basics/#result-items",
    
    "relUrl": "/gettingstarted/basics/#result-items"
  },"6": {
    "doc": "Basics",
    "title": "User interface",
    "content": ". Besides its primary function, the input line displays the input action text and input hint and contains the settings button. If the input starts with a trigger of a trigger query handler, it is highlighted. If available the input action text of the currently selected item will be displayed right beside your input. Hit Tab to replace the current input with it. If space permits, the input hint of the query handler will be displayed right-aligned in the input box. The settings button is appears on the right side of the input line if you hover over it or if a query a query is being processed. Left-clicking opens the settings window, while right-clicking shows a context menu. The manually entered text of the input line is stored in the input history when the window is hidden. This input history can be used to search and browse your past input. Holding Shift enables input history navigation for ⬆ and ⬇ no matter which item is selected. When the results list is hidden or the first item is selected ⬆ works without holding Shift. If enabled, the (manually set) input text is used for input history search. Input history navigation then only shows input history entries matching the input text. The results list displays result items of a query. Hold and release Super⌃ to switch between match items and fallback items. Result items can have multiple associated actions. The default action of an item is activated by pressing Return or Enter. To display the list of alternative actions of an item Ctrl⌘+Return or hold Alt⌥ . As a reference the following table lists the keys you can use to control Albert: . | Key | Action | . | Esc | Hide the window. | . | Alt⌥ (Hold)Ctrl⌘+Return | Show actions. | . | Super⌃ (Hold) | Show fallbacks. | . | Shift+⬆ | Next entry in input history. | . | Shift+⬇ | Previous entry in input history. | . | Tab | Activate input action of the selected item (evaluation, completion, etc). | . | Return,Ctrl⌘+O | Activate item. | . | Shift+Return | Insert new line. | . | Ctrl⌘+Shift+ReturnCtrl⌘+Shift+O | Activate item but do not hide. | . | Ctrl⌘+, | Open settings window. | . | ⬆,⬇,PgUp,PgDn | Navigation in item lists. | . | Alt⌥+F4,⌘+Q | Quit Albert (Depends on settings). | . | Ctrl⌘+H/J/K/L | Vim bindings. Synthesize to arrows. | . | Ctrl⌘+N/P | Emacs bindings. Synthesize to arrows. | . ",
    "url": "/gettingstarted/basics/#user-interface",
    
    "relUrl": "/gettingstarted/basics/#user-interface"
  },"7": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": ". | Code . | Fixes and Features | New plugins | . | Reviews | Maintenance | Documentation | Promotion | Appreciation | . ",
    "url": "/gettingstarted/contributing/",
    
    "relUrl": "/gettingstarted/contributing/"
  },"8": {
    "doc": "Contributing",
    "title": "Code",
    "content": "The place for official plugin repositories is the Albert launcher organization. Distributed native plugins are submodules in the Albert repository plugins directory. Python plugins in the Python repository plugins directory respectively. The main branch of a plugin repository represents the latest version that is or will be distributed with the application and therefore has to be protected. Contributions have to pass peer reviewing via pull request. As such contributors have to work on their own fork and send a PR. The rationale is to ensure . | Safety. For users and developers. | Simplicity. Upstream main branch is reviewed and distributable. | Tidiness. git status is clean or contains approved plugin changes. | . Fixes and Features . Before putting a lot of effort into a contribution, open an issue and discuss your planned changes. This is important, because there is a chance that your changes may be rejected. Contributing to existing plugins is straightforward. | Fork the repository to your account. | Work on on the fork. | Send a pull request to the upstream repository. | Go through the review process until approved. | . New plugins . We highly appreciate new plugin additions, however to be shipped there should be a demand for its use case. If you want your plugin to be added to the official repositories, put it to the list of candidates in the organization readme and promote it in the community chat. Once your plugin has some users, you can request its addition to the official repositories. For a plugin to be accepted it has to satisfy the following requirements: . | The project is licensed under a permissive open source license (e.g. MIT, Apache, BSD). | The project has an active maintainer. | The repository content is essential to the functionality of the plugin. Keep in mind that in future somebody else may want to maintain the plugin and for distribution the size of the repository should be minimal. | Icons are vector graphics or 128x128 raster images. | . Having a concise README.md summarizing features, requirements, limitations, supported platforms and implementation details is recommended. ",
    "url": "/gettingstarted/contributing/#code",
    
    "relUrl": "/gettingstarted/contributing/#code"
  },"9": {
    "doc": "Contributing",
    "title": "Reviews",
    "content": "Reviews are extremely important to ensure the quality of the code and the safety of users and developers. Reviews have always been a bottleneck in the past, so we are looking for reviewers. You could review open pull requests any time or join the reviewer teams. Three members of the reviewer team will be assigned on new pull requests of any (new) plugin. Leave a message with your GitHub username to get an invite. If you want to help with just some particular plugins, consider becoming a maintainer instead (see below). ",
    "url": "/gettingstarted/contributing/#reviews",
    
    "relUrl": "/gettingstarted/contributing/#reviews"
  },"10": {
    "doc": "Contributing",
    "title": "Maintenance",
    "content": "If you are using a plugin a lot and have basic programming skills you are probably a good plugin maintainer. As passive maintainer you can help by using the plugin, reporting issues and sending pull requests containing fixes and features. As an active/official maintainer you will be assigned on new issues and pull requests. A maintainer is implicitly a reviewer of its plugin. To opt-in send a pull request adding your GitHub username to the maintainers list of the plugin metadata. Revert to opt-out. ",
    "url": "/gettingstarted/contributing/#maintenance",
    
    "relUrl": "/gettingstarted/contributing/#maintenance"
  },"11": {
    "doc": "Contributing",
    "title": "Documentation",
    "content": "Each page on the website contains an ‘Edit this page on GitHub’ link in the footer that you can use to send improvements. The API reference is generated from source code, in particular the header files of the public API. To improve the API reference, send a pull request with the changes to the header files in the include directory in the Albert repository. ",
    "url": "/gettingstarted/contributing/#documentation",
    
    "relUrl": "/gettingstarted/contributing/#documentation"
  },"12": {
    "doc": "Contributing",
    "title": "Promotion",
    "content": ". | Star Albert on GitHub. | Star your favorite plugins. Also helps triaging issues. | Spread the word on social media. | Vote on rankings like alternative.to and such. | . ",
    "url": "/gettingstarted/contributing/#promotion",
    
    "relUrl": "/gettingstarted/contributing/#promotion"
  },"13": {
    "doc": "Contributing",
    "title": "Appreciation",
    "content": "Support me (@manuelschneider) as a creator by becoming a sponsor or donating. Do not forget the authors and maintainers of your most beloved plugins. Check their GitHub profiles for donation links. ",
    "url": "/gettingstarted/contributing/#appreciation",
    
    "relUrl": "/gettingstarted/contributing/#appreciation"
  },"14": {
    "doc": "C++",
    "title": "Extending Albert using C++",
    "content": "This page focuses on the practical aspects of extending Albert using C++ and its peculiarities. To get an overview of the API refer to the general extension section. | Writing native C++ plugins | Plugin directories | . A native plugin is a Qt Plugin, i.e. a shared library providing an instance of the class PluginInstance. ",
    "url": "/gettingstarted/extension/cplusplus/#extending-albert-using-c",
    
    "relUrl": "/gettingstarted/extension/cplusplus/#extending-albert-using-c"
  },"15": {
    "doc": "C++",
    "title": "Writing native C++ plugins",
    "content": "Albert provides C and CMake macros that implement conventions to streamline the plugin development process and reduce the boilerplate code required to a few lines of code. Read the documentation in the header of the Albert CMake module before you proceed. A minimal CMakeLists.txt: . project(my_plugin VERSION 1.0) find_package(Albert REQUIRED) albert_plugin() . A minimal metadata.json: . { \"name\": \"My Plugin\", \"description\": \"Do useful stuff\", \"authors\": [\"@myname\"], \"license\": \"MIT\" } . A plugin class has to be default-constructible, inherit QObject and PluginInstance and contain the ALBERT_PLUGIN macro in its body. However, if subclassing an extension interface, you’d rather inherit util::ExtensionPlugin for convenience. A minimal trigger query handler plugin: . #pragma once #include &lt;albert/extensionplugin.h&gt; #include &lt;albert/triggerqueryhandler.h&gt; class Plugin : public albert::ExtensionPlugin, public albert::TriggerQueryHandler { ALBERT_PLUGIN void handleTriggerQuery(albert::Query &amp;query) override { // Handle query } }; . Next, skim through the API reference. For reference see the official plugins. ",
    "url": "/gettingstarted/extension/cplusplus/#writing-native-c-plugins",
    
    "relUrl": "/gettingstarted/extension/cplusplus/#writing-native-c-plugins"
  },"16": {
    "doc": "C++",
    "title": "Plugin directories",
    "content": ". | Linux: . | ~/.local/{lib,lib64}/albert | /usr/local/{lib,lib64}/albert | /usr/lib/${MULTIARCH_TUPLE}/albert | /usr/{lib,lib64}/albert | . | macOS: . | ~/Library/Application Support/Albert/plugins | $BUNDLE_PATH/Contents/PlugIns | . | . ",
    "url": "/gettingstarted/extension/cplusplus/#plugin-directories",
    
    "relUrl": "/gettingstarted/extension/cplusplus/#plugin-directories"
  },"17": {
    "doc": "C++",
    "title": "C++",
    "content": " ",
    "url": "/gettingstarted/extension/cplusplus/",
    
    "relUrl": "/gettingstarted/extension/cplusplus/"
  },"18": {
    "doc": "Albert Design",
    "title": "Albert Design",
    "content": " ",
    "url": "/design/",
    
    "relUrl": "/design/"
  },"19": {
    "doc": "Albert Design",
    "title": "Frontend state machine",
    "content": "%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '9px', 'fontFamily': 'Inter' }}}%% stateDiagram-v2 state StateMachine { direction LR state Results { direction LR state \"None\" as ResultsHidden state \"Matches\" as ResultsMatches state \"Fallbacks\" as ResultsFallbacks state \"Disabled\" as ResultsDisabled [*] --&gt; ResultsHidden ResultsHidden --&gt; ResultsMatches: ⚡️haveMatches ResultsHidden --&gt; ResultsFallbacks: ⚡️showFallbacks &amp;&amp; fallbacks ResultsHidden --&gt; ResultsFallbacks: ⚡️!busy &amp;&amp; fallbacks &amp;&amp; !triggered ResultsMatches --&gt; ResultsHidden: ⚡️!query ResultsMatches --&gt; ResultsDisabled: ⚡️query ResultsMatches --&gt; ResultsFallbacks: ⚡️showFallbacks &amp;&amp; fallbacks ResultsFallbacks --&gt; ResultsHidden: ⚡️!query ResultsFallbacks --&gt; ResultsDisabled: ⚡️query ResultsFallbacks --&gt; ResultsMatches: ⚡️hideFallbacks &amp;&amp; matches ResultsFallbacks --&gt; ResultsHidden: ⚡️hideFallbacks &amp;&amp; !matches &amp;&amp; busy ResultsDisabled --&gt; ResultsHidden: ⚡️!query ResultsDisabled --&gt; ResultsHidden: ⚡️timeout ResultsDisabled --&gt; ResultsHidden: ⚡️!busy &amp;&amp; (!fallbacks || triggered) ResultsDisabled --&gt; ResultsFallbacks: ⚡️!busy &amp;&amp; fallbacks &amp;&amp; !triggered ResultsDisabled --&gt; ResultsMatches: ⚡️haveMatches } state Actions { direction LR [*] --&gt; ActionsHidden ActionsHidden --&gt; ActionsVisible: ⚡️showActions AND actions AND (ResultsMatches||ResultsFallbacks) ActionsVisible --&gt; ActionsHidden: ⚡️hideActions ActionsVisible --&gt; ActionsHidden: ⚡️ResultsMatches.exit ActionsVisible --&gt; ActionsHidden: ⚡️ResultsFallbacks.exit ActionsVisible --&gt; ActionsHidden: ⚡️currentItemChanged } state KeyboardNavigation { direction LR [*] --&gt; NavigateResults NavigateResults --&gt; NavigateTextEdit: ⚡️multiline NavigateActions --&gt; NavigateTextEdit: ⚡️multiline NavigateTextEdit --&gt; NavigateResults: ⚡️!multiline &amp;&amp; !ActionsVisible.active NavigateTextEdit --&gt; NavigateActions: ⚡️!multiline &amp;&amp; ActionsVisible.active NavigateResults --&gt; NavigateActions: ⚡️ActionsVisible.enter NavigateActions --&gt; NavigateResults: ⚡️ActionsVisible.exit } state SettingsButtonSpin { direction LR [*] --&gt; Slow Slow --&gt; Fast: busy Fast --&gt; Slow: !busy } state SettingsButtonAppearance { direction LR [*] --&gt; SettingsButtonHidden SettingsButtonHidden --&gt; SettingsButtonVisible: ⚡️hoverInput SettingsButtonHidden --&gt; SettingsButtonHighlight: ⚡️hoverButton SettingsButtonHidden --&gt; SettingsButtonHighlightDelay: ⚡️busy SettingsButtonVisible --&gt; SettingsButtonHidden: ⚡️!hoverInput SettingsButtonVisible --&gt; SettingsButtonHighlight: ⚡️busy SettingsButtonVisible --&gt; SettingsButtonHighlight: ⚡️hoverButton SettingsButtonHighlight --&gt; SettingsButtonHidden: ⚡️!busy &amp;&amp; !hover SettingsButtonHighlight --&gt; SettingsButtonVisible: ⚡️!busy &amp;&amp; inputHover SettingsButtonHighlight --&gt; SettingsButtonVisible: ⚡️!hoverButton SettingsButtonHighlightDelay --&gt; SettingsButtonHighlight: ⚡️timer SettingsButtonHighlightDelay --&gt; SettingsButtonHighlight: ⚡️hoverButton SettingsButtonHighlightDelay --&gt; SettingsButtonHidden: ⚡️!busy } } . ",
    "url": "/design/#frontend-state-machine",
    
    "relUrl": "/design/#frontend-state-machine"
  },"20": {
    "doc": "Donating",
    "title": "Donating",
    "content": "If you found here, you are probably thinking about supporting the development of your favorite keyboard launcher. Thank you! ❤️ . | GitHub | Become a sponsor | . | Liberapay | Become a patron | . | SEPA wire transfer Recommended for users in the eurozone 🇪🇺💳 | Send a mail to get the IBAN. | . | Crypto currenciesLeave a mail for others | BTC bc1qr4jl6jwwhuv6gtu5e0lg2r5wq45y75ulw2sfr3 ETH 0xb4c2ed5ee122341a7f271342c5c2a61263d37357 | . | Binance Pay | ID: 15381738 ℹ️ . | . | Stripe ⚠️ High fees Credit cards, GPay, SEPA direct debit | Donate $ . | Donate € . | . | PayPal ⚠️ High fees | Donate . | . ",
    "url": "/donation/",
    
    "relUrl": "/donation/"
  },"21": {
    "doc": "FAQ",
    "title": "Frequently asked questions",
    "content": ". | Wayland . | XWayland | Hotkeys | Window rules | . | How to open with a particular text? | Where are cache, config and data files stored? | How to get GNOME platform integration (auto dark mode)? | How to use a custom app/tray icon? | How to get debug logs? | How’s it going? | . ",
    "url": "/gettingstarted/faq/#frequently-asked-questions",
    
    "relUrl": "/gettingstarted/faq/#frequently-asked-questions"
  },"22": {
    "doc": "FAQ",
    "title": "Wayland",
    "content": "XWayland . Wayland comes with a lot of limitations. Some can be mitigated by using XWayland. # Do not set QT_QPA_PLATFORM as it will propagate to launched apps albert --platform xcb . Currently the shipped desktop entry does this for you. Hotkeys . Wayland hotkey adoption is still in its infancy. A general solution is to let your desktop environment handle the hotkey registration. Bind the hotkey to the command you want it to run, e.g. albert toggle . | Gnome help | KDE documentation | You are welcome to improve this list. | . The above runs a new app instance, which is relatively heavy. Another approach is to pipe the command you want to send directly into the albert IPC socket. # Before 0.28.0 the string to send was \"toggle\". # Using socat echo -n '[\"toggle\"]' | socat - ~/.cache/albert/ipc_socket # Using netcat-openbsd echo -n '[\"toggle\"]' | nc -U ~/.cache/albert/ipc_socket . Gnome does not invoke a shell for bindings. Use sh -c \"&lt;command line&gt;\". Window rules . Wayland does not allow to set window properties like on any other platforms. There some of the window settings have no effect. Some compositors allow configuring the window properties in their settings. | KDE | On Gnome your best bet is probably GNOME Window Rules extension. | . ",
    "url": "/gettingstarted/faq/#wayland",
    
    "relUrl": "/gettingstarted/faq/#wayland"
  },"23": {
    "doc": "FAQ",
    "title": "How to open with a particular text?",
    "content": "albert show \"trigger \" . ",
    "url": "/gettingstarted/faq/#how-to-open-with-a-particular-text",
    
    "relUrl": "/gettingstarted/faq/#how-to-open-with-a-particular-text"
  },"24": {
    "doc": "FAQ",
    "title": "Where are cache, config and data files stored?",
    "content": "According to QStandardPaths base directories are: . |   | Linux/BSD | MacOS | . | Cache | 👨🏼‍💻 ~/.cache/albert | 👨🏼‍💻 ~/Library/Caches/albert💻 /Library/Caches/albert | . | Config | 👨🏼‍💻 ~/.config/albert💻 /etc/xdg/albert | 👨🏼‍💻 ~/Library/Preferences/albert | . | Data | 👨🏼‍💻 ~/.local/share/albert💻 /usr/local/share/albert💻 /usr/share/albert | 👨🏼‍💻 ~/Library/Application Support/albert💻 /Library/Application Support/albert💻 &lt;APPDIR&gt;/../Resources | . Albert places its data in the base directories root. Plugins use subdirectories named by their identifier. In case of multiple directories the directories are considered in the given order. Users may change the contents of the user 👨🏼‍💻 directories (manually or by using the app). Do not touch app/vendor 💻 directories! . Note that environment variables may change these base directories on XDG platforms. See XDG Base Directory Specification for more information. ",
    "url": "/gettingstarted/faq/#where-are-cache-config-and-data-files-stored",
    
    "relUrl": "/gettingstarted/faq/#where-are-cache-config-and-data-files-stored"
  },"25": {
    "doc": "FAQ",
    "title": "How to get GNOME platform integration (auto dark mode)?",
    "content": "Since Qt6.4 automatic dark mode should at least work as expected for the main window. Install QGnomePlatform. QGnomePlatform project is unmaintained and no longer actively developed, however there is nothing else providing that good integration (afaik). Note that QGnomePlatform sets styles and such (read more). So using QT_STYLE_OVERRIDE/--style may not work as expected. Run Albert using: . # Do not set QT_QPA_PLATFORMTHEME as it will propagate to launched apps albert --platformtheme gnome . ",
    "url": "/gettingstarted/faq/#how-to-get-gnome-platform-integration-auto-dark-mode",
    
    "relUrl": "/gettingstarted/faq/#how-to-get-gnome-platform-integration-auto-dark-mode"
  },"26": {
    "doc": "FAQ",
    "title": "How to use a custom app/tray icon?",
    "content": "mkdir -p \"~/.local/share/icons/hicolor/scalable/apps/\" # Overwrite the default app icon cp &lt;your-icon&gt;.svg \"~/.local/share/icons/hicolor/scalable/apps/albert.svg\" # Overwrite the default tray icon cp &lt;your-icon&gt;.svg \"~/.local/share/icons/hicolor/scalable/apps/albert-tray.svg\" . ",
    "url": "/gettingstarted/faq/#how-to-use-a-custom-apptray-icon",
    
    "relUrl": "/gettingstarted/faq/#how-to-use-a-custom-apptray-icon"
  },"27": {
    "doc": "FAQ",
    "title": "How to get debug logs?",
    "content": "# Enable _all_ albert logs QT_LOGGING_RULES='albert*=true' albert # Enable all albert logs of a particular plugin QT_LOGGING_RULES='albert.python*=true' albert # Enable _all_ logs (albert + qt) QT_LOGGING_RULES='*=true' albert # Enable _all_ logs (albert + qt) with additional plugin debug info QT_LOGGING_RULES='*=true' QT_DEBUG_PLUGINS=1 albert # Debug DBus QT_LOGGING_RULES='default*=true' QDBUS_DEBUG=1 . ",
    "url": "/gettingstarted/faq/#how-to-get-debug-logs",
    
    "relUrl": "/gettingstarted/faq/#how-to-get-debug-logs"
  },"28": {
    "doc": "FAQ",
    "title": "How’s it going?",
    "content": ". | Star history compared | GitHub Release Stats | . ",
    "url": "/gettingstarted/faq/#hows-it-going",
    
    "relUrl": "/gettingstarted/faq/#hows-it-going"
  },"29": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": " ",
    "url": "/gettingstarted/faq/",
    
    "relUrl": "/gettingstarted/faq/"
  },"30": {
    "doc": "Features",
    "title": "Features",
    "content": " ",
    "url": "/features",
    
    "relUrl": "/features"
  },"31": {
    "doc": "Features",
    "title": "🚀 Performance",
    "content": "Your muscle memory achieves 1000+ KPM? Albert can keep up with that. Being one of the primary design goals, Albert is designed to be fast. ",
    "url": "/features#-performance",
    
    "relUrl": "/features#-performance"
  },"32": {
    "doc": "Features",
    "title": "🌱 Efficiency",
    "content": "Technology, design, tooling, distribution, contribution standards. Decisions made with efficiency in mind. ",
    "url": "/features#-efficiency",
    
    "relUrl": "/features#-efficiency"
  },"33": {
    "doc": "Features",
    "title": "🧩 Flexibility",
    "content": "Albert is based on a plugin system that allows you to customize its functionality. It could be your go-to app launcher or a full-blown system command palette. ",
    "url": "/features#-flexibility",
    
    "relUrl": "/features#-flexibility"
  },"34": {
    "doc": "Features",
    "title": "🔧 Extensibility",
    "content": "Albert offers APIs designed to be simple and easy to learn. To accomplish common tasks with minimal code it provides a set powerful utilities. ",
    "url": "/features#-extensibility",
    
    "relUrl": "/features#-extensibility"
  },"35": {
    "doc": "Features",
    "title": "🔋 Batteries included",
    "content": "Albert comes with a curated collection of peer-reviewed, actively maintained plugins. No searching, no duplicates, no broken code, no risks. Works out of the box. ",
    "url": "/features#-batteries-included",
    
    "relUrl": "/features#-batteries-included"
  },"36": {
    "doc": "Gallery",
    "title": "Gallery",
    "content": ". ",
    "url": "/gallery",
    
    "relUrl": "/gallery"
  },"37": {
    "doc": "Help",
    "title": "Getting help",
    "content": "If you have questions or problems the community is there to help. To be fair we expect you to do your own research first. | Make sure your issue is in the scope of this project. | Google your issue. | Ask AI for help (e.g. chatgpt.com). | Search for similar existing issues. | If you need support ask for it in the community chats. | If you think you found a bug post an issue. | . ",
    "url": "/gettingstarted/help/#getting-help",
    
    "relUrl": "/gettingstarted/help/#getting-help"
  },"38": {
    "doc": "Help",
    "title": "Community chat",
    "content": ". | Chat on Telegram | Chat on Discord | . These chats are bridged using matterbridge. ",
    "url": "/gettingstarted/help/#community-chat",
    
    "relUrl": "/gettingstarted/help/#community-chat"
  },"39": {
    "doc": "Help",
    "title": "Help",
    "content": " ",
    "url": "/gettingstarted/help/",
    
    "relUrl": "/gettingstarted/help/"
  },"40": {
    "doc": "Installation",
    "title": "Installation",
    "content": "Prebuilt packages are available for Linux and macOS. Windows is not supported yet. ",
    "url": "/gettingstarted/installation/",
    
    "relUrl": "/gettingstarted/installation/"
  },"41": {
    "doc": "Extension",
    "title": "Writing extensions",
    "content": "Before you start reading the details of extending Albert, make sure you have read the basics. Albert can be extended using C++ or Python. | Native C++ plugins benefit the performance and power of (Obj)C(++) and the native access to Qt (Eventloop, translations, the framework itself …). | Python plugins on the other hand are easier to write and distribute and PyPi has a library for almost everything you can think of. However the Albert Python API is a limited subset of the native API and the GIL prevents true parallelism. | . ",
    "url": "/gettingstarted/extension/#writing-extensions",
    
    "relUrl": "/gettingstarted/extension/#writing-extensions"
  },"42": {
    "doc": "Extension",
    "title": "Brief core API overview",
    "content": "Every plugin has to implement the PluginInstance, which provides a list of Extension instances. The built-in extension interfaces related to query handling are: . | TriggerQueryHandler | GlobalQueryHandler | FallbackHandler | . All query handlers provide instances of the Item interface, which contains several methods related to the user interface, most notably the Action factory. In addition to the core API, utilities facilitate plugin development and help developers to provide users with a streamlined search experience. | util::StandardItem Value-based Item implementation. | util::Matcher Utility for configurable string matching. | util::IndexQueryHandler Index-based GlobalQueryHandler implementation. | . Next, read the section of your prefered API, build something cool and share it. ",
    "url": "/gettingstarted/extension/#brief-core-api-overview",
    
    "relUrl": "/gettingstarted/extension/#brief-core-api-overview"
  },"43": {
    "doc": "Extension",
    "title": "Extension",
    "content": " ",
    "url": "/gettingstarted/extension/",
    
    "relUrl": "/gettingstarted/extension/"
  },"44": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": " ",
    "url": "/gettingstarted/",
    
    "relUrl": "/gettingstarted/"
  },"45": {
    "doc": "Home",
    "title": "Focus on the essence.",
    "content": "Albert is a lightning-fast, plugin-based keyboard launcher. Get started View on GitHub Donate ❤️ ",
    "url": "/#focus-on-the-essence",
    
    "relUrl": "/#focus-on-the-essence"
  },"46": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"47": {
    "doc": "Linux",
    "title": "Linux",
    "content": "Base packages for Arch, Debian, Fedora, openSUSE, Raspbian and Ubuntu are built and hosted at Open Build Service. Installation instructions for each distribution can be found under “Add repository and install manually” in the OBS software center. This is the recommended way, because you will not get updates if you “Grab binary packages directly” instead. Visit OBS software center . Several other distributions are supported when used with the correct package base: . | Package base | Distribution | . | Ubuntu 24.04 | Elementary OS 8Linux Mint 22PopOS! 24.04 | . | Ubuntu 22.04 | Elementary OS 7Linux Mint 21PopOS! 22.04 | . | Debian 12.0 | Linux Mint DE 6 | . | Arch Linux | CachyOSEndeavourOSGarudaManjaro | . ",
    "url": "/gettingstarted/installation/linux/",
    
    "relUrl": "/gettingstarted/installation/linux/"
  },"48": {
    "doc": "Linux",
    "title": "Unofficial packages",
    "content": ". | ArchLinux AUR | Gentoo | nixOS | . ",
    "url": "/gettingstarted/installation/linux/#unofficial-packages",
    
    "relUrl": "/gettingstarted/installation/linux/#unofficial-packages"
  },"49": {
    "doc": "macOS",
    "title": "macOS",
    "content": "Albert is available via homebrew tap. The package is built and hosted on GitHub. The homebrew tap provides a cask for Albert. To install Albert via homebrew run the following commands: . brew tap albertlauncher/albert brew update brew install albert . brew update and brew upgrade will keep the app up to date. Note that the packaged app is not signed. Read the caveats section of brew install. For convenience the cask creates an ad-hoc signature and disables Gatekeeper for the app. See the postflight section of the cask. The provided bundle is not self-contained and uses dependencies provided by homebrew. This allows using shared memory and reduces the actual private memory consumption to a negliable amount. ",
    "url": "/gettingstarted/installation/macos/",
    
    "relUrl": "/gettingstarted/installation/macos/"
  },"50": {
    "doc": "News",
    "title": "News",
    "content": ". | 15 October 2025 Albert v33.0.1 released | 14 October 2025 Albert v33.0.0 released | 21 August 2025 Albert v0.32.1 released | 16 August 2025 Albert v0.32.0 released | 29 July 2025 Albert v0.31.1 released | 28 July 2025 Albert v0.31.0 released | 12 July 2025 Albert v0.30.1 released | 30 June 2025 Albert v0.30.0 released | 27 June 2025 Albert v0.29.4 released | 26 June 2025 Albert v0.29.3 released | 25 June 2025 Albert v0.29.2 released | 24 June 2025 Albert v0.29.1 released | 24 June 2025 Albert v0.29.0 released | 20 June 2025 Albert v0.28.2 released | 19 June 2025 Albert v0.28.1 released | 30 May 2025 Albert v0.28.0 released | 06 April 2025 Albert v0.27.8 released | 02 April 2025 Albert v0.27.7 released | 02 April 2025 Albert v0.27.6 released | 06 March 2025 Albert v0.27.5 released | 05 March 2025 Albert v0.27.4 released | 28 February 2025 Albert v0.27.3 released | 28 February 2025 Albert v0.27.2 released | 27 February 2025 Albert v0.27.1 released | 27 February 2025 Albert v0.27.0 released | 06 January 2025 Albert v0.26.13 released | 06 January 2025 Albert v0.26.12 released | 30 December 2024 Albert v0.26.11 released | 06 December 2024 Albert v0.26.10 released | 02 December 2024 Albert v0.26.9 released | 18 November 2024 Albert v0.26.8 released | 08 November 2024 Albert Homebrew Tap | 07 November 2024 Albert v0.26.7 released | 22 October 2024 Albert v0.26.6 released | 16 October 2024 Albert v0.26.5 released | 24 September 2024 Albert v0.26.4 released | 07 September 2024 Albert v0.26.3 released | 21 August 2024 Albert v0.26.2 released | 20 August 2024 Albert v0.26.1 released | 16 August 2024 Albert v0.26.0 released | 02 August 2024 Albert v0.25.0 released | 09 July 2024 Albert v0.24.3 released | 02 July 2024 Albert v0.24.2 released | 28 June 2024 Albert v0.24.1 released | 28 June 2024 Albert v0.24.0 released | 02 May 2024 GPG error: Signatures invalid: EXPKEYSIG | 03 March 2024 Albert v0.23.0 released | 26 November 2023 Albert v0.22.17 released | 18 November 2023 Albert v0.22.16 released | 08 November 2023 Albert v0.22.15 released | 06 October 2023 Albert v0.22.14 released | 05 October 2023 Albert v0.22.13 released | 03 October 2023 Albert v0.22.12 released | 03 October 2023 Albert v0.22.11 released | 03 October 2023 Albert v0.22.10 released | 28 September 2023 Albert v0.22.9 released | 28 September 2023 Albert v0.22.8 released | 27 September 2023 Albert v0.22.7 released | 26 September 2023 Albert v0.22.6 released | 22 September 2023 Albert v0.22.5 released | 30 August 2023 Albert v0.22.4 released | 17 August 2023 Albert v0.22.3 released | 14 August 2023 Albert v0.22.2 released | 14 August 2023 Albert v0.22.1 released | 12 August 2023 Albert v0.22.0 released | 27 June 2023 Albert v0.21.1 released | 23 June 2023 Albert v0.21.0 released | 19 June 2023 Prebuilt master branch packages available | 01 May 2023 Albert v0.20.14 released | 30 March 2023 Albert v0.20.13 released | 29 March 2023 Albert v0.20.12 released | 27 March 2023 Albert v0.20.11 released | 20 March 2023 Albert v0.20.10 released | 13 March 2023 Albert v0.20.9 released | 11 February 2023 Albert v0.20.8 released | 10 February 2023 Albert v0.20.7 released | 08 February 2023 Albert v0.20.6 released | 01 February 2023 Albert v0.20.5 released | 31 January 2023 Albert v0.20.4 released | 27 January 2023 Albert v0.20.3 released | 25 January 2023 Albert v0.20.2 released | 25 January 2023 Albert v0.20.1 released | 24 January 2023 Albert v0.20.0 released | 22 January 2023 Albert v0.19.4 released | 22 January 2023 Albert v0.19.3 released | 18 January 2023 Albert v0.19.2 released | 18 January 2023 Albert v0.19.1 released | 18 January 2023 Albert v0.19.0 released | 13 January 2023 Albert v0.18.13 released | 13 January 2023 Albert v0.18.12 released | 11 January 2023 Albert v0.18.11 released | 09 January 2023 Albert v0.18.10 released | 07 January 2023 Albert v0.18.9 released | 07 January 2023 Albert v0.18.8 released | 05 January 2023 Albert v0.18.7 released | 05 January 2023 Albert v0.18.6 released | 04 January 2023 Albert v0.18.5 released | 03 January 2023 Albert v0.18.4 released | 02 January 2023 Albert v0.18.3 released | 02 January 2023 Albert v0.18.2 released | 01 January 2023 Albert v0.18.1 released | 31 December 2022 Albert v0.18.0 released | 04 October 2022 Albert v0.17.4 released | 05 July 2022 Albert v0.17.3 released | 24 December 2020 Albert v0.17.2 released | 21 December 2020 Albert v0.17.1 released | 17 December 2020 Albert v0.17.0 released | 10 December 2020 Albert v0.16.4 released | 03 December 2020 Albert v0.16.3 released | 25 November 2020 Albert v0.16.2 released | 31 December 2018 Albert v0.16.1 released | 28 December 2018 Albert v0.16.0 released | 16 December 2018 Albert v0.15.0 released | 21 September 2018 Albert v0.14.22 released | 08 June 2018 Albert v0.14.21 released | 04 June 2018 Albert v0.14.20 released | 15 May 2018 Albert v0.14.19 released | 23 March 2018 Albert v0.14.18 released | 23 March 2018 Albert v0.14.17 released | 09 March 2018 Albert v0.14.16 released | 26 January 2018 Albert v0.14.15 released | 06 December 2017 Albert v0.14.14 released | 25 November 2017 Albert v0.14.13 released | 23 November 2017 Albert v0.14.12 released | 18 November 2017 Albert v0.14.11 released | 16 November 2017 Albert v0.14.10 released | 15 November 2017 Albert v0.14.9 released | 13 November 2017 Albert v0.14.8 released | 03 November 2017 Albert v0.14.7 released | 02 November 2017 Official repositories at openSUSE Build Service | 31 October 2017 Albert v0.14.6 released | 30 October 2017 Albert v0.14.5 released | 25 October 2017 Albert v0.14.4 released | 21 October 2017 Albert v0.14.3 released | 20 October 2017 Albert v0.14.2 released | 19 October 2017 Albert v0.14.1 released | 18 October 2017 Albert v0.14.0 released | 30 September 2017 Albert v0.13.1 released | 28 September 2017 Albert v0.13.0 released | 09 June 2017 Albert v0.12.0 released | 28 May 2017 Albert v0.11.3 released | 13 May 2017 Albert v0.11.2 released | 16 April 2017 Albert v0.11.1 released | 15 April 2017 Albert v0.11.0 released | 14 April 2017 Albert v0.10.4 released | 02 April 2017 Albert v0.10.3 released | 24 March 2017 Albert v0.10.2 released | 20 March 2017 Albert v0.10.1 released | 19 March 2017 Albert v0.10 released | 13 March 2017 Albert v0.9.5 released | 01 March 2017 Albert v0.9.4 released | 05 February 2017 Albert v0.9.3 released | 30 January 2017 Albert v0.9.2 released | 23 January 2017 Albert v0.9.1 released | 17 January 2017 Albert v0.9 released | 11 January 2017 Repository moved to organization page | 09 January 2017 Albert finally has a website | . Be up to date with the RSS feed . ",
    "url": "/news/",
    
    "relUrl": "/news/"
  },"51": {
    "doc": "Plugins",
    "title": "Plugins",
    "content": ". | . ",
    "url": "/plugins/",
    
    "relUrl": "/plugins/"
  },"52": {
    "doc": "Albert Privacy Notice",
    "title": "Albert Privacy Notice",
    "content": "Version 1.1-beta, last updated: 30 September, 2025 . tl;dr . | No personal data is collected. | No profiling, tracking, or commercial use takes place. | No data shared with third parties. | All data serves the purpose of improving the app. | . Who is responsible? . This application (“Albert”) is developed and maintained by Manuel Schneider (@manuelschneid3r). For inquiries, post an issue on Github. What data is processed? . When the app sends a report, the following data is processed: . | Hashed device ID (Pseudonym) | Local time (To properly map a report to a “human date”) | . Depending on the users choice to send telemetry data, the following data is processed: . | Country code (derived from the IP address, the IP address itself is not stored) | App and Qt version | Operation system type and version | Platform type (macOS, Wayland, etc.) | Enabled plugins | Activated extensions | . Why is this data used? . Basic data is used exclusively for: . | Computing aggregated users counts. | . Optional data is used exclusively for: . | Understanding the distribution of releases. | Triaging issues. | Prioritizing plugin development efforts. | Prioritizing localization efforts. | Determine when to increase the minimum required versions of dependencies. | . Legal basis . Processing is based on legitimate interest under Article 6(1)(f) GDPR. Retention period . One year. ",
    "url": "/privacy/",
    
    "relUrl": "/privacy/"
  },"53": {
    "doc": "Python",
    "title": "Extending Albert using Python",
    "content": "This page focuses on the practical aspects of extending Albert using Python and its peculiarities. To get an overview of the API refer to the general extension section. ",
    "url": "/gettingstarted/extension/python/#extending-albert-using-python",
    
    "relUrl": "/gettingstarted/extension/python/#extending-albert-using-python"
  },"54": {
    "doc": "Python",
    "title": "Writing Python plugins",
    "content": "An Albert Python plugin is a Python module having an interface defined in the Albert stub file. At runtime the stub file is written to your user Python plugin directory, where it serves as inline documentation and coding assistance in your IDE while development. A minimal trigger query handler plugin: . from albert import * md_iid = '3.0' md_version = '1.0' md_name = 'My plugin' md_description = 'Does things' class Plugin(PluginInstance, TriggerQueryHandler): def __init__(self): PluginInstance.__init__(self) TriggerQueryHandler.__init__(self) def handleTriggerQuery(self, query): # query.add(StandardItem(…)) . Next, skim through the Python stub file. For reference see the official plugins. In case of questions see the C++ API. ",
    "url": "/gettingstarted/extension/python/#writing-python-plugins",
    
    "relUrl": "/gettingstarted/extension/python/#writing-python-plugins"
  },"55": {
    "doc": "Python",
    "title": "Plugin directories",
    "content": "Python plugin directories are the directories at python/plugins relative to the app data directories. | xdg: . | ~/.local/share/albert/python/plugins | /usr/local/share/albert/python/plugins | /usr/share/albert/python/plugins | . | macOS: . | ~/Library/Application Support/Albert/python/plugins | /Library/Application Support/Albert/python/plugins | $BUNDLE_PATH/Contents/PlugIns/python/plugins | . | . ",
    "url": "/gettingstarted/extension/python/#plugin-directories",
    
    "relUrl": "/gettingstarted/extension/python/#plugin-directories"
  },"56": {
    "doc": "Python",
    "title": "Technical notes and limitations",
    "content": ". | Due to the different type systems, multiple virtual inheritance of extension interfaces is not supported. However, multiple extensions can be added by reimplementing albert.PluginInstance.extensions(). | Python plugin execution is subject to the Python Global Interpreter Lock (GIL). This means that only one thread can execute Python code at a time. This can become a problem for parallelization of queries or multithreaded global queries. Long running handlers will introduce noticeable lags. Do not block execution in your query handlers, especially not in handleGlobalQuery. If you can, use IndexQueryHandler instead, which performs the handling in C++ space. | PyBind11 method resolution does not support mixin behavior. Usually this should not be much of a problem, but there is one prevalent use case: Reusing id, name and description of the PluginInstance class for your Extension. For the sake of minimal boilerplate the mixin behavior is emulated for these methods. I.e. if you inherit PluginInstance and any Extension, you do not have to reimplement these methods. | . ",
    "url": "/gettingstarted/extension/python/#technical-notes-and-limitations",
    
    "relUrl": "/gettingstarted/extension/python/#technical-notes-and-limitations"
  },"57": {
    "doc": "Python",
    "title": "Python",
    "content": " ",
    "url": "/gettingstarted/extension/python/",
    
    "relUrl": "/gettingstarted/extension/python/"
  },"58": {
    "doc": "From source",
    "title": "From source",
    "content": "Building and installing from sources is the least convenient, but most flexible way. This way is usually for developers only. The build process is trivial, but you have to manage the dependencies on your own. See the OBS package specs for up to date build and runtime dependencies. git clone --recursive https://github.com/albertlauncher/albert.git cmake -B build -S albert -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Debug cmake --build build cmake --install build . ",
    "url": "/gettingstarted/installation/source/",
    
    "relUrl": "/gettingstarted/installation/source/"
  }
}
